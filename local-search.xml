<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Flutter:0序章</title>
    <link href="/2024/08/27/flutter0/"/>
    <url>/2024/08/27/flutter0/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>之前对安卓开发有点感兴趣，想搓一个玩具出来看看，但是试过jetpack compose之后还是放弃了（虽然Kotlin是很优秀的语言）,鉴于JVM系列繁琐的依赖管理和混乱的文档，我把目光放到了跨平台框架Flutter上  </p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>首先先上<a href="https://flutter.dev/">官网</a>下载 Flutter,里面已经内嵌了 Dart 的 SDK，不用额外下载。对于国内的网络环境，可以参考以下<a href="https://docs.flutter.cn/community/china">指导</a></li><li>如果你的第一个项目也是 Android 的话，还需要下载 Android Studio 便于之后的一些设置如 AVD 等（虽然可以用真机代替）</li><li>设置<code>flutter/bin</code>和<code>Android/SDK/platform-tools</code>到环境变量,在 cmd 输入<code>flutter doctor</code>检查是否可以使用即可  </li><li>在 vscode 下载 Flutter 和 Dart 插件，终端输入<code>flutter create myapp</code>即可在 vscode 里使用 flutter sdk 进行开发</li></ol><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>基础的介绍可以通过这本<a href="https://book.flutterchina.club/chapter1/mobile_development_intro.html">《Flutter实战·第二版》</a>来进行学习。  吗？<br>那肯定不可能学完了再上手的，所以这里介绍一下大概思路。<br>先来看看flutter常见的项目架构：  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">lib/<br>│<br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.dart</span><br>├── <span class="hljs-attribute">src</span>/<br>│   ├── pages/<br>│   │   ├── page0<span class="hljs-selector-class">.dart</span><br>│   │   └── page1<span class="hljs-selector-class">.dart</span><br>│   ├── widgets/<br>│   │   └── custom_button<span class="hljs-selector-class">.dart</span><br>│   ├── models/<br>│   │   └── user_model<span class="hljs-selector-class">.dart</span><br>│   ├── services/<br>│   │   └── api_service<span class="hljs-selector-class">.dart</span><br>│   ├── utils/<br>│   │   └── date_utils<span class="hljs-selector-class">.dart</span><br>│   ├── constants/<br>│   │   └── colors<span class="hljs-selector-class">.dart</span><br>│   └── routes/<br>│       └── routes.dart<br></code></pre></td></tr></table></figure><p>入手时对于简单的项目可以先写main.dart,使用<code>GetMaterial</code>类来初始化一开始的路由<br>然后写 page 和 routes,用一些简单的<code>Container</code>或者<code>Scaffold</code>占位，初始的页面就写好了！以下是一个demo:</br></br><br>route</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppRoute</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> pages = [<br>    GetPage(name: <span class="hljs-string">&quot;/&quot;</span>, page: () =&gt; <span class="hljs-keyword">const</span> MusicListPage()),<br>    GetPage(name: <span class="hljs-string">&quot;/music/musicId&quot;</span>, page: () =&gt; <span class="hljs-keyword">const</span> MusicDetailPage()),<br>  ];<br>&#125;<br></code></pre></td></tr></table></figure><p>main.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> GetMaterialApp(<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: ThemeData(<br>        colorScheme: ColorScheme.fromSeed(<br>            seedColor: <span class="hljs-keyword">const</span> Color.fromARGB(<span class="hljs-number">255</span>, <span class="hljs-number">43</span>, <span class="hljs-number">184</span>, <span class="hljs-number">104</span>)),<br>        useMaterial3: <span class="hljs-keyword">true</span>,<br>      ),<br>      initialRoute: <span class="hljs-string">&quot;/&quot;</span>,<br>      getPages: AppRoute.pages,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基础的部分大概就是这么多啦，后面可能会介绍一下其他控件的使用<br>P.S.<br>会有第二篇吗？……<br>会有的！</p>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linklist 链表</title>
    <link href="/2024/02/29/link_list/"/>
    <url>/2024/02/29/link_list/</url>
    
    <content type="html"><![CDATA[<h2 id="一-链表定义与性质"><a href="#一-链表定义与性质" class="headerlink" title="一. 链表定义与性质"></a>一. 链表定义与性质</h2><ol><li>由相同数据类型的n个数据元素组成</li><li>元素个数称为长度</li><li>链式结构的查找和插入时间复杂度为O(N)</li></ol><h2 id="二-线性表顺序存储"><a href="#二-线性表顺序存储" class="headerlink" title="二.线性表顺序存储"></a>二.线性表顺序存储</h2><h3 id="1-结构体定义："><a href="#1-结构体定义：" class="headerlink" title="1. 结构体定义："></a>1. 结构体定义：</h3><p>可用动态或静态分配内存，一般用静态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//动态分配</span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">int</span> ElementType;<br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">LNode</span></span><br><span class="hljs-class">&#123;</span><br>    ElementType  *Data; <br>    <span class="hljs-type">int</span> MaxSize;<br>    Position  Last;<br>&#125;;<br>*Data=(ElementType *)<span class="hljs-built_in">malloc</span>(Max * <span class="hljs-keyword">sizeof</span>(ElementType));   <span class="hljs-comment">//伪码，使用时动态分配</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//也可静态分配内存</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50;</span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">int</span> Position;<br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">LNode</span></span><br><span class="hljs-class">&#123;</span><br>    ElementType   Data[MaxSize];  <br>    Position  Last;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化</span><br>List <span class="hljs-title function_">MakeEmpty</span><span class="hljs-params">()</span><br>&#123;<br>   List  L;<br>   L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>   L-&gt;Last = <span class="hljs-number">-1</span>;   <span class="hljs-comment">//Last表示最后一个元素的下标</span><br>   <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>顺序结构的查找、插入、删除操作只需注意L-&gt;Last 不是最后一个元素的位序，而是位序-1即可</li><li><strong>同时注意非法查找的判定条件</strong></li></ul><p>接下来的内容（插入，删除等）很简单，之后着重讲链式的存储方式<br>顺序内容详情见 ppt</p><h2 id="三-链式结构"><a href="#三-链式结构" class="headerlink" title="三.链式结构"></a>三.链式结构</h2><h3 id="1-结构体定义及初始化"><a href="#1-结构体定义及初始化" class="headerlink" title="1. 结构体定义及初始化"></a>1. 结构体定义及初始化</h3><ul><li>给结构体动态分配内存</li><li>给指针赋予指向，<strong>避免野指针</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">PtrTolNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> Data;<br>    PtrTolNode Next; <br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrTolNode Position; <span class="hljs-comment">//position为节点地址</span><br><span class="hljs-keyword">typedef</span> PtrTolNode List;<br><br><span class="hljs-comment">//初始化，带头节点</span><br>List <span class="hljs-title function_">Init_List</span><span class="hljs-params">(List L)</span><br>&#123;<br>    L=(List)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    L-&gt;Next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-查找，插入，删除操作"><a href="#2-查找，插入，删除操作" class="headerlink" title="2. 查找，插入，删除操作"></a>2. 查找，插入，删除操作</h3><ul><li><p><strong>查找</strong><br>查找时的位序并不是下标，而是下标+1，从1开始<br>一个是通过位序找值，一个是通过值找结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//通过位序查找</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Find_value</span><span class="hljs-params">(List L,<span class="hljs-type">int</span> index)</span><br>&#123;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">1</span>;<br>    Position p=L;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;cnt!=index)<br>    &#123;<br>        p=p-&gt;Next;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((p!=<span class="hljs-literal">NULL</span>)&amp;&amp;(cnt==index))<br>    &#123;<br>        <span class="hljs-keyword">return</span> p-&gt;Data;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Error;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//通过值来查找</span><br>Position <span class="hljs-title function_">Find_index</span><span class="hljs-params">(List L,<span class="hljs-type">int</span> value)</span><br>&#123;<br>    Position p;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;Data!=value)<br>    &#123;<br>        p=p-&gt;Next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>插入</strong><br>将元素X插入到表中第i个位置，i是位序，cnt是当前位序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(List L,<span class="hljs-type">int</span> X,<span class="hljs-type">int</span> i)</span><br>&#123;<br>    Position tmp,p;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">1</span>;   <span class="hljs-comment">//标记当前位序</span><br>    p=L; <span class="hljs-comment">//先把p放在表头</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;cnt&lt;i)  <span class="hljs-comment">//把cnt移动到i-1处,p是i-1个节点</span><br>    &#123;<br>        p=p-&gt;Next;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>||cnt!=i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入位置错误&quot;</span>);<br>        <span class="hljs-built_in">free</span>(tmp);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        tmp=(Position)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>        tmp-&gt;Next=p-&gt;Next;<br>        p-&gt;Next=tmp;<br>        tmp-&gt;Data=X;<br>        <span class="hljs-keyword">return</span> L;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;   <br></code></pre></td></tr></table></figure></li><li><p><strong>删除</strong><br>此时cnt为目标位序i的前一个位序，因此从0开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//删除位序为i的节点</span><br><span class="hljs-comment">//大概就是找到目标节点前一个的节点和位序p,cnt</span><br><span class="hljs-comment">//然后tmp=p-&gt;Next</span><br><span class="hljs-comment">//p-&gt;Next=tmp-&gt;Next, free(tmp)</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(List L,<span class="hljs-type">int</span> i)</span><br>&#123;<br>    Position p,tmp;<br>    p=L;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;cnt&lt;i<span class="hljs-number">-1</span>)<br>    &#123;<br>        p=p-&gt;Next;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p||p-&gt;Next==<span class="hljs-literal">NULL</span>||cnt!=i<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    tmp=p-&gt;Next;<br>    p-&gt;Next=tmp-&gt;Next;<br>    <span class="hljs-built_in">free</span>(tmp);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="其他注意点："><a href="#其他注意点：" class="headerlink" title="其他注意点："></a>其他注意点：</h2><ol><li>算法原地工作指的是算法不需要其他额外的辅助空间，即空间复杂度为O(1)</li><li>计算时间复杂度时，一般考虑算法一般情况执行操作的复杂度，如插入算法一般为O(N^2),快速排序一般为O(NlogN),但在极端情况下有反例。因此，光看时间复杂度无法判断两个算法实际在具体问题上的时间优劣性。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>线性表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Queue 队列</title>
    <link href="/2024/02/29/queue/"/>
    <url>/2024/02/29/queue/</url>
    
    <content type="html"><![CDATA[<h2 id="一-队列定义与性质"><a href="#一-队列定义与性质" class="headerlink" title="一. 队列定义与性质"></a>一. 队列定义与性质</h2><ol><li>队列是具有一定操作约束的线性表，插入和删除操作有一定要求：只能在一端插入，而在另一端删除，是一种先进先出的数据结构</li></ol><h2 id="二-队列顺序结构"><a href="#二-队列顺序结构" class="headerlink" title="二. 队列顺序结构"></a>二. 队列顺序结构</h2><ul><li>结构体内容：数组，队首结点，队尾结点，容量</li><li>初始状态队首和队尾都处于头节点“0”的位置</li><li>为解决假溢出，入队出队时用 <code>Q-&gt;Rear=(Q-&gt;Rear+1)%Q-&gt;MaxSize; Q-&gt;Front=(Q-&gt;Front+1)%Q-&gt;MaxSize </code>的方式构建循环链表，此时Rear在队尾元素的位置，Front则在队首元素的前一个位置</li><li></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3d73b6516939ce1339e93fbf511b7fb3.png" alt="演示"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span>  <span class="hljs-type">int</span>  ElementType;<br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">int</span>  Position;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">PtrToQNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> </span><br><span class="hljs-class">&#123;</span><br>ElementType *Data;<br>Position Front, Rear;  <br><span class="hljs-type">int</span> MaxSize;  <br>&#125;;<br><span class="hljs-keyword">typedef</span>   PtrToQNode  Queue;<br><br><span class="hljs-comment">//建立队列</span><br>Queue <span class="hljs-title function_">CreateQueue</span><span class="hljs-params">( <span class="hljs-type">int</span> MaxSize )</span> <br>&#123;<br>    Queue Q = (Queue)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> QNode));<br>    Q-&gt;Data = (ElementType *)<span class="hljs-built_in">malloc</span>(MaxSize * <span class="hljs-keyword">sizeof</span>(ElementType));<br>    Q-&gt;Front = Q-&gt;Rear = <span class="hljs-number">0</span>;<br>    Q-&gt;MaxSize = MaxSize;<br>    <span class="hljs-keyword">return</span> Q;<br>&#125;<br><br><span class="hljs-comment">//确认是否队满</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsFull</span><span class="hljs-params">( Queue Q )</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ((Q-&gt;Rear+<span class="hljs-number">1</span>)%Q-&gt;MaxSize == Q-&gt;Front);<br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Queue Q, ElementType X)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(IsFull(Q)==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已满&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Q-&gt;Rear=(Q-&gt;Rear+<span class="hljs-number">1</span>)%Q-&gt;MaxSize;    <span class="hljs-comment">//Rear 和Front差一</span><br>        Q-&gt;Data[Q-&gt;Rear]=X;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//确认是否空队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsEmpty</span><span class="hljs-params">( Queue Q )</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (Q-&gt;Front == Q-&gt;Rear);<br>&#125;<br><br><span class="hljs-comment">//出队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Pop</span><span class="hljs-params">(Queue Q)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(IsEmpty(Q)==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已空&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Q-&gt;Front=(Q-&gt;Front+<span class="hljs-number">1</span>)%Q-&gt;MaxSize;<br>        <span class="hljs-keyword">return</span> Q-&gt;Data[Q-&gt;Front];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//队的长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Length</span><span class="hljs-params">(Queue Q)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (Q-&gt;Rear-Q-&gt;Front+Q-&gt;MaxSize)%Q-&gt;MaxSize;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-队列链式存储"><a href="#三-队列链式存储" class="headerlink" title="三. 队列链式存储"></a>三. 队列链式存储</h2><ul><li>队列的链式存储其实和链表类似，只是除了设置next指针外，还需要控制front 和 rear指针始终指向头和尾，因此我们设置两个结构体，一个是充当线性表部分的内容，另一个控制队列整体的头尾节点</li><li>删除结点时要注意条件：队列不为空，元素是否仅有一个<br> ps: 以下代码不带头节点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span>  <span class="hljs-type">char</span>  ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">PtrToNode</span>;</span><br><span class="hljs-keyword">typedef</span> PtrToNode Position;<br><br><span class="hljs-comment">//建立节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>ElementType Data;<br>PtrToNode Next;<br>&#125;;<br><br><span class="hljs-comment">//建立队列</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">PtrToQNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> </span><br><span class="hljs-class">&#123;</span><br>Position Front, Rear;  <span class="hljs-comment">//Q-&gt;rear,front本身就是指针，是Node的结点</span><br><span class="hljs-type">int</span> MaxSize;  <br>&#125;;<br><span class="hljs-keyword">typedef</span>   PtrToQNode  Queue;<br><br><span class="hljs-comment">//初始化</span><br>Queue <span class="hljs-title function_">CreateQueue</span><span class="hljs-params">( )</span><br>&#123;<br>Queue Q = (PtrToQNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> QNode));<br>Q-&gt;Front = <span class="hljs-literal">NULL</span>;<br>Q-&gt;Rear = <span class="hljs-literal">NULL</span>;<br>Q-&gt;MaxSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> Q;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsEmpty</span><span class="hljs-params">( Queue Q )</span><br>&#123;   <br><span class="hljs-keyword">return</span> (Q-&gt;Front == <span class="hljs-literal">NULL</span>);  <br>&#125;<br><br><span class="hljs-comment">//入队</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">AddQueue</span><span class="hljs-params">(Queue Q,ElementType x)</span><br>&#123;<br>Position p=(PtrToNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>p-&gt;Data=x;<br>p-&gt;Next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//不带头结点第一次入队要判断是否为空，要是空则头尾指针都指向P </span><br><span class="hljs-keyword">if</span>(Q-&gt;Front==<span class="hljs-literal">NULL</span>)<br>&#123;<br>Q-&gt;Front=p;<br>Q-&gt;Rear=p;<br>&#125; <br><span class="hljs-keyword">else</span><br>&#123;     <span class="hljs-comment">//不为空则直接在尾指针后面操作 </span><br>Q-&gt;Rear-&gt;Next=p;<span class="hljs-comment">//添加结点</span><br>Q-&gt;Rear=p;   <span class="hljs-comment">//把Q-&gt;Rear重新设置为队尾结点</span><br>&#125;<br>Q-&gt;MaxSize++;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//出队</span><br>ElementType <span class="hljs-title function_">DeleteQ</span><span class="hljs-params">( Queue Q )</span> <br>&#123;<br>    Position  FrontCell; <br>    ElementType  FrontElem;<br>    <span class="hljs-keyword">if</span>  ( IsEmpty(Q) ) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列空&quot;</span>);    <br><span class="hljs-keyword">return</span> ERROR;     <br>&#125;<br>    <span class="hljs-keyword">else</span> <br>&#123;<br>FrontCell = Q-&gt;Front;<br><span class="hljs-keyword">if</span> ( Q-&gt;Front == Q-&gt;Rear ) <span class="hljs-comment">/* 若队列只有一个元素 */</span><br>&#123;<br>Q-&gt;Front = Q-&gt;Rear = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/* 删除后队列置为空 */</span><br>&#125;<br><span class="hljs-keyword">else</span>       <br>&#123;<br>Q-&gt;Front = Q-&gt;Front-&gt;Next;<br>&#125;              <br>FrontElem = FrontCell-&gt;Data;<br><span class="hljs-built_in">free</span>( FrontCell );  <span class="hljs-comment">/* 释放被删除结点空间  */</span><br><span class="hljs-keyword">return</span>  FrontElem;     <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>线性表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Stack 栈</title>
    <link href="/2024/02/29/stack/"/>
    <url>/2024/02/29/stack/</url>
    
    <content type="html"><![CDATA[<h2 id="一-栈的性质"><a href="#一-栈的性质" class="headerlink" title="一. 栈的性质"></a>一. 栈的性质</h2><ol><li><p>栈是一种后进先出的数据结构，仅有一端进行数据交换</p></li><li><p>可利用堆栈进行后缀表达式的求解，遇到数字入栈，遇到操作数出栈，算完入栈，最后结果出栈</p></li><li><p>中缀转后缀表达式的原则：<br> 遇到数字直接进入后缀表达式</p><p> 遇到操作数则以以下原则进行：</p><ol><li>若为‘（’，入栈</li><li>若为‘）’，则依次将栈中的运算符加入后缀表达式，直到出现‘（’，并从栈中删除‘（’</li><li>若为‘+’，‘-’，‘*’，‘&#x2F;’</li></ol><ul><li>栈空，入栈</li><li>栈顶元素为‘（’,入栈</li><li>高于栈顶元素优先级，入栈</li><li>否则，依次弹出栈顶运算符，直到一个优先级比它低的运算符或‘（’为止<br> 遍历完成，若栈非空，依次弹出栈中所有元素</li></ul></li></ol><h2 id="二-顺序结构"><a href="#二-顺序结构" class="headerlink" title="二. 顺序结构"></a>二. 顺序结构</h2><p>结构体含三个内容：数组，大小和栈顶指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> *<span class="hljs-title">PtrTolNode</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Position;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-keyword">typedef</span> PtrTolNode Stack;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span></span><br><span class="hljs-class">&#123;</span><br>    ElementType *Data;<br>    <span class="hljs-type">int</span> Maxize;<br>    Position top; <span class="hljs-comment">//栈顶指针</span><br>&#125;;<br><br><span class="hljs-comment">//建栈</span><br>Stack <span class="hljs-title function_">creating_stack</span><span class="hljs-params">(<span class="hljs-type">int</span> Max)</span><br>&#123;<br>    Stack S=(Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>    S-&gt;Data=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(Max*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));  <span class="hljs-comment">//建立动态数组</span><br>    S-&gt;top=<span class="hljs-number">-1</span>;            <span class="hljs-comment">//栈顶元素的下标，无元素时为-1</span><br>    S-&gt;Maxize=Max;<br>    <span class="hljs-keyword">return</span> S;<br>&#125;<br><br><span class="hljs-comment">//确认是否满栈</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">IsFull</span><span class="hljs-params">( Stack S )</span><br>&#123; <br>    <span class="hljs-keyword">return</span> (S-&gt;top == S-&gt;Maxize<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">//压栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack S, ElementType X )</span> <br>&#123;<br>    <span class="hljs-keyword">if</span> ( IsFull(S)==<span class="hljs-number">1</span> ) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;堆栈满&quot;</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        S-&gt;top++;<br>        S-&gt;Data[S-&gt;top] = X;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;  <br><br><span class="hljs-comment">//确认是否空栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsEmpty</span><span class="hljs-params">( Stack S )</span><br>&#123;  <br>    <span class="hljs-keyword">return</span> (S-&gt;top == <span class="hljs-number">-1</span>);<br>&#125;<br><br>ElementType <span class="hljs-title function_">Pop</span><span class="hljs-params">( Stack S )</span> <br>&#123;<br>    <span class="hljs-keyword">if</span> ( IsEmpty(S)== <span class="hljs-number">1</span>) <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;堆栈空&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">/* ERROR是ElementType的特殊值，标志错误 */</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> ( S-&gt;Data[S-&gt;top--]);<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-链式结构"><a href="#三-链式结构" class="headerlink" title="三. 链式结构"></a>三. 链式结构</h2><p>结构体内容：数据，指针<br>入栈方式是把节点插入到S的后方，S为头节点，不存放数据，相当于S是数据入口<br>出栈方式是把S与S-&gt;Next-&gt;Next匹配好，再把中间free掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> *<span class="hljs-title">PtrToSNode</span>;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> </span><br><span class="hljs-class">&#123;</span><br>    ElementType Data;<br>    PtrToSNode Next;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToSNode Stack;<br><span class="hljs-keyword">typedef</span> PtrToSNode Position;<br><br>Stack <span class="hljs-title function_">Create_Stack</span><span class="hljs-params">()</span><br>&#123;<br>    Stack S;<br>    S=(PtrToSNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>    S-&gt;Next==<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> S;<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">Ifempty</span><span class="hljs-params">(Stack S)</span><br>&#123;<br>    <span class="hljs-keyword">return</span>(S-&gt;Next==<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack S,ElementType X)</span><br>&#123;<br>    Position Tempcell;<br>    Tempcell=(Position)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>    Tempcell-&gt;Next=S-&gt;Next;<br>    S-&gt;Next=Tempcell;<br>    Tempcell-&gt;Data=X;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br>ElementType <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack S)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(Ifempty(S))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Position First;<br>        First=S-&gt;Next;<br>        S-&gt;Next=S-&gt;Next-&gt;Next;   <span class="hljs-comment">//可加入一步free</span><br>        <span class="hljs-keyword">return</span> First-&gt;Data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>线性表</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/02/29/hello-world/"/>
    <url>/2024/02/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
